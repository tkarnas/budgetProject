{"remainingRequest":"/Users/tomo/Documents/projects/vue-diplomski/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tomo/Documents/projects/vue-diplomski/src/components/RoleForm.vue?vue&type=style&index=0&id=5bb18cec&scoped=true&lang=css&","dependencies":[{"path":"/Users/tomo/Documents/projects/vue-diplomski/src/components/RoleForm.vue","mtime":1680973353022},{"path":"/Users/tomo/Documents/projects/vue-diplomski/node_modules/css-loader/dist/cjs.js","mtime":1680948621394},{"path":"/Users/tomo/Documents/projects/vue-diplomski/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1680948623381},{"path":"/Users/tomo/Documents/projects/vue-diplomski/node_modules/postcss-loader/src/index.js","mtime":1680948622442},{"path":"/Users/tomo/Documents/projects/vue-diplomski/node_modules/cache-loader/dist/cjs.js","mtime":1680948621095},{"path":"/Users/tomo/Documents/projects/vue-diplomski/node_modules/vue-loader/lib/index.js","mtime":1680948623381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYmx1ZS1idXR0b24gew0KICBkaXNwbGF5OiBibG9jazsNCiAgd2lkdGg6IDQwJTsNCiAgcGFkZGluZzogMTBweCAwOw0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDEsIDEzMywgMTMzLCAwLjMpOw0KICBjb2xvcjogd2hpdGU7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsNCn0NCg0KLmJvcmRlciB7DQogIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOw0KICBib3JkZXItcmFkaXVzOiAxMHB4Ow0KICBoZWlnaHQ6IDEwMCU7DQogIHBhZGRpbmc6IDEwcHg7DQogIG1hcmdpbjogMTBweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpOw0KfQ0KDQouZmxleCB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDEwMCU7DQogIGRpc3BsYXk6IGZsZXg7DQogIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQoNCi5mb3JtLWdyb3VwIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgaGVpZ2h0OiA5NyU7DQogIHdpZHRoOiA4MCU7DQogIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQouZm9ybS1ncm91cCBsYWJlbCB7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBmb250LXdlaWdodDogYm9sZDsNCiAgbWFyZ2luOiAwcHggMjBweDsNCn0NCg0KLmZvcm0tZ3JvdXAgaW5wdXQgew0KICBkaXNwbGF5OiBibG9jazsNCiAgd2lkdGg6IDEwMCU7DQogIHBhZGRpbmc6IDEwcHg7DQogIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLmZvcm0tZ3JvdXAgc2VsZWN0IHsNCiAgZGlzcGxheTogYmxvY2s7DQogIHdpZHRoOiAxMDAlOw0KICBwYWRkaW5nOiAxMHB4Ow0KICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOw0KICBib3JkZXItcmFkaXVzOiA0cHg7DQp9DQo="},{"version":3,"sources":["RoleForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RoleForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"flex\">\r\n    <div class=\"form-group\" v-if=\"isAdmin\">\r\n      <h1>Set roles for users</h1>\r\n      <form class=\"form-group border\">\r\n        <label for=\"select-field\">Select role</label>\r\n        <select id=\"select-field\" v-model=\"role\">\r\n          <option value=\"isAdmin\">Admin</option>\r\n          <option value=\"isTeamLead\">Teamlead</option>\r\n          <option value=\"isUser\">User</option>\r\n        </select>\r\n        <div\r\n          v-if=\"role === 'isUser' && allTeamsAndProjects.onlyProjecsts.length\"\r\n        >\r\n          <div>Add this user to project</div>\r\n          <select id=\"select-field\" v-model=\"userProject\">\r\n            <option\r\n              v-for=\"(project, index) in allTeamsAndProjects.onlyProjecsts\"\r\n              :key=\"index\"\r\n              :value=\"project\"\r\n            >\r\n              {{ project.projectName }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <div\r\n          v-if=\"\r\n            role === 'isTeamLead' &&\r\n            allTeamsAndProjects.teamsWithProjects.length\r\n          \"\r\n        >\r\n          <div>Add this team lead to team</div>\r\n          <select id=\"select-field\" v-model=\"userProject\">\r\n            <option\r\n              v-for=\"(team, index) in allTeamsAndProjects.teamsWithProjects\"\r\n              :key=\"index\"\r\n              :value=\"team\"\r\n            >\r\n              {{ team.teamName }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <label for=\"reason-field\">Select user</label>\r\n        <select id=\"select-field\" v-model=\"user\">\r\n          <option\r\n            v-for=\"(user, index) in allUsersArr\"\r\n            :key=\"index\"\r\n            :value=\"user\"\r\n          >\r\n            {{ user }}\r\n          </option>\r\n        </select>\r\n        <div\r\n          class=\"blue-button\"\r\n          style=\"margin-top: 10px\"\r\n          @click=\"setRole(user, role, userProject)\"\r\n        >\r\n          Submit\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db, firebase } from \"@/firebase\";\r\n\r\nexport default {\r\n  name: \"RoleForm\",\r\n  props: [\"isAdmin\", \"allTeamsAndProjects\", \"rights\"],\r\n  data() {\r\n    return {\r\n      user: \"\",\r\n      role: \"\",\r\n      userProject: \"\",\r\n      allUsersArr: [],\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchAllUsers();\r\n  },\r\n  methods: {\r\n    getTeams() {\r\n      this.$emit(\"call-get-teams\");\r\n    },\r\n    setRole() {\r\n      if (!this.user || !this.role) {\r\n        this.$alert(\"Fields cant be empty!\", \"Warning\", \"warning\");\r\n        return;\r\n      }\r\n      const user = this.user;\r\n\r\n      const roleMap = {\r\n        isAdmin: { isAdmin: true },\r\n        isTeamLead: { isTeamLead: true },\r\n        default: { isUser: true },\r\n      };\r\n\r\n      let found;\r\n      for (const checkUser of this.allUsersArr) {\r\n        if (checkUser === user) {\r\n          found = true;\r\n          // this.$alert(\"This user already exists!\", \"Warning\", \"warning\");\r\n          // return\r\n        }\r\n      }\r\n\r\n      if (this.role === 'isUser' && (this.userProject === '' || this.userProject === undefined || this.userProject === null))\r\n      {\r\n        this.$alert(\"Cant add user to project becasue there projects doesnt exist\", \"Warning\", \"warning\")\r\n        return;\r\n      }\r\n\r\n      if (found) {\r\n        db.collection(\"users\")\r\n          .get()\r\n          .then((query) => {\r\n            query.forEach((doc) => {\r\n              const data = doc.data();\r\n              if (user === data.user) {\r\n                let previousRole = \"isUser\";\r\n                if (data.isAdmin) {\r\n                  previousRole = \"isAdmin\";\r\n                } else if (data.isTeamLead) {\r\n                  previousRole = \"isTeamLead\";\r\n                }\r\n                const userId = doc.id;\r\n                db.collection(\"users\")\r\n                  .doc(userId)\r\n                  .update({\r\n                    [previousRole]: firebase.firestore.FieldValue.delete(),\r\n                    [this.role]: true,\r\n                    user: this.user,\r\n                  });\r\n                  if (this.role === \"isTeamLead\") {\r\n                  db.collection(\"teams\")\r\n                    .where(\"name\", \"==\", this.userProject.teamName)\r\n                    .where(\"budget\", \"==\", this.userProject.teamBudget)\r\n                    .get()\r\n                    .then((snapshot) => {\r\n                      if (snapshot.empty) {\r\n                        return;\r\n                      }\r\n                      snapshot.forEach((doc) => {\r\n                        const teamId = doc.id;\r\n                        db.collection(\"teams\")\r\n                          .doc(teamId)\r\n                          .update({\r\n                            teamlead: this.user,\r\n                          })\r\n                          .then(() => {\r\n                            this.$alert(\"Added\", \"Success\", \"success\")\r\n                            this.getTeams()\r\n                          })\r\n                          .catch((error) => {\r\n                            console.error(\"Error adding project:\", error);\r\n                          });\r\n                      });\r\n                    })\r\n                    .catch((error) => {\r\n                      console.error(\"Error getting team:\", error);\r\n                    });\r\n                  }\r\n                  else if (this.role === 'isUser')\r\n                  {\r\n                    db.collection(\"teams\")\r\n                  .get()\r\n                  .then((snapshot) => {\r\n                    if (snapshot.empty) {\r\n                      console.warn(\"error\");\r\n                      return;\r\n                    }\r\n                    snapshot.forEach((doc) => {\r\n                      const team = doc.data();\r\n                      const teamId = doc.id;\r\n                      for (const project of team.projects) {\r\n                        if (\r\n                          project.projectName ===\r\n                            this.userProject.projectName &&\r\n                          project.projectBudget ===\r\n                            this.userProject.projectBudget\r\n                        ) {\r\n                          const projectIndex = team.projects.indexOf(project);\r\n\r\n                          db.collection(\"teams\")\r\n                            .doc(teamId)\r\n                            .get()\r\n                            .then((doc) => {\r\n                              const updatedTeam = doc.data();\r\n                              updatedTeam.projects[projectIndex].people.push(\r\n                                user\r\n                              );\r\n\r\n                              db.collection(\"teams\")\r\n                                .doc(teamId)\r\n                                .set(updatedTeam);\r\n                                this.$alert(\"Added\", \"Success\", \"success\");\r\n                                this.getTeams()\r\n                            });\r\n                        }\r\n                      }\r\n                    });\r\n                  });\r\n                  }\r\n                }\r\n            });\r\n          });\r\n      } else {\r\n        const role = roleMap[this.role] || roleMap.default;\r\n        if (this.role === \"isUser\") {\r\n          for (const team of this.allTeamsAndProjects.teamsWithProjects) {\r\n            for (const project of team.projects) {\r\n              if (\r\n                project.projectName === this.userProject.projectName &&\r\n                project.projectBudget === this.userProject.projectBudget\r\n              ) {\r\n                db.collection(\"teams\")\r\n                  .get()\r\n                  .then((snapshot) => {\r\n                    if (snapshot.empty) {\r\n                      console.warn(\"error\");\r\n                      return;\r\n                    }\r\n                    snapshot.forEach((doc) => {\r\n                      const team = doc.data();\r\n                      const teamId = doc.id;\r\n                      for (const project of team.projects) {\r\n                        if (\r\n                          project.projectName ===\r\n                            this.userProject.projectName &&\r\n                          project.projectBudget ===\r\n                            this.userProject.projectBudget\r\n                        ) {\r\n                          const projectIndex = team.projects.indexOf(project);\r\n\r\n                          db.collection(\"teams\")\r\n                            .doc(teamId)\r\n                            .get()\r\n                            .then((doc) => {\r\n                              const updatedTeam = doc.data();\r\n                              updatedTeam.projects[projectIndex].people.push(\r\n                                user\r\n                              );\r\n\r\n                              db.collection(\"teams\")\r\n                                .doc(teamId)\r\n                                .set(updatedTeam);\r\n                                this.$alert(\"Added\", \"Success\", \"success\");\r\n                                this.getTeams()\r\n                            });\r\n                        }\r\n                      }\r\n                    });\r\n                  });\r\n              }\r\n            }\r\n          }\r\n        } else if (this.role === \"isTeamLead\") {\r\n          db.collection(\"teams\")\r\n            .where(\"name\", \"==\", this.userProject.teamName)\r\n            .where(\"budget\", \"==\", this.userProject.teamBudget)\r\n            .get()\r\n            .then((snapshot) => {\r\n              if (snapshot.empty) {\r\n                return;\r\n              }\r\n              snapshot.forEach((doc) => {\r\n                const teamId = doc.id;\r\n                db.collection(\"teams\")\r\n                  .doc(teamId)\r\n                  .update({\r\n                    teamlead: this.user,\r\n                  })\r\n                  .then(() => \r\n                  {\r\n                    this.$alert(\"Added\", \"Success\", \"success\")\r\n                    this.getTeams()\r\n                  })\r\n                  .catch((error) => {\r\n                    console.error(\"Error adding project:\", error);\r\n                  });\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error getting team:\", error);\r\n            });\r\n        }\r\n        db.collection(\"users\")\r\n          .add({ user: this.user, ...role })\r\n          .then(() => {\r\n            const roleMap = {\r\n              isAdmin: \"admin\",\r\n              isTeamLead: \"teamlead\",\r\n              default: \"user\",\r\n            };\r\n            const rola = roleMap[this.role] || roleMap.default;\r\n            this.$alert(\r\n              `User ${this.user} is set as ${rola}`,\r\n              \"Success\",\r\n              \"success\"\r\n            );\r\n            this.user = \"\";\r\n            this.role = \"\";\r\n            this.getTeams();\r\n          })\r\n          .catch((error) => {\r\n            this.$alert(error, \"Error\", \"error\");\r\n          });\r\n      }\r\n    },\r\n    fetchAllUsers() {\r\n      db.collection(\"users\")\r\n        .get()\r\n        .then((query) => {\r\n          query.forEach((doc) => {\r\n            const data = doc.data();\r\n            const user = data.user;\r\n            if (!data.isAdmin && !data.isTeamLead) {\r\n              this.allUsersArr.push(user);\r\n            }\r\n          });\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.blue-button {\r\n  display: block;\r\n  width: 40%;\r\n  padding: 10px 0;\r\n  text-align: center;\r\n  background-color: rgba(41, 133, 133, 0.3);\r\n  color: white;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  border: 1px solid black;\r\n}\r\n\r\n.border {\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  height: 100%;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.flex {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-content: center;\r\n  justify-content: center;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 97%;\r\n  width: 80%;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  font-weight: bold;\r\n  margin: 0px 20px;\r\n}\r\n\r\n.form-group input {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.form-group select {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>"]}]}