"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
// @ts-ignore
const hammerhead_1 = require("../../client/core/deps/hammerhead");
const utils_1 = require("./utils");
const axis_values_1 = __importDefault(require("../../client/core/utils/values/axis-values"));
const MOUSE_EVENT_OPTIONS = {
    clickCount: 1,
    button: 'left',
};
class ProxylessEventSimulator {
    constructor(dispatchEventFn, leftTopPoint) {
        this._dispatchEventFn = dispatchEventFn;
        this._leftTopPoint = leftTopPoint || new axis_values_1.default(0, 0);
    }
    _createMouseEventOptions(type, options) {
        return hammerhead_1.utils.extend({
            x: options.options.clientX + this._leftTopPoint.x,
            y: options.options.clientY + this._leftTopPoint.y,
            modifiers: (0, utils_1.calculateKeyModifiersValue)(options.options),
            button: (0, utils_1.calculateMouseButtonValue)(options.options),
            type,
        }, MOUSE_EVENT_OPTIONS);
    }
    mouseDown(options) {
        const eventOptions = this._createMouseEventOptions('mousePressed', options);
        return this._dispatchEventFn(types_1.EventType.Mouse, eventOptions);
    }
    mouseUp(options) {
        const eventOptions = this._createMouseEventOptions('mouseReleased', options);
        return this._dispatchEventFn(types_1.EventType.Mouse, eventOptions);
    }
}
exports.default = ProxylessEventSimulator;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtc2ltdWxhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3h5bGVzcy9jbGllbnQvZXZlbnQtc2ltdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0NBQXFDO0FBQ3JDLGFBQWE7QUFDYixrRUFBMEQ7QUFDMUQsbUNBQWdGO0FBQ2hGLDZGQUFvRTtBQUVwRSxNQUFNLG1CQUFtQixHQUFHO0lBQ3hCLFVBQVUsRUFBRSxDQUFDO0lBQ2IsTUFBTSxFQUFNLE1BQU07Q0FDckIsQ0FBQztBQUVGLE1BQXFCLHVCQUF1QjtJQUl4QyxZQUFhLGVBQXlCLEVBQUUsWUFBaUM7UUFDckUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztRQUN4QyxJQUFJLENBQUMsYUFBYSxHQUFNLFlBQVksSUFBSSxJQUFJLHFCQUFVLENBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFTyx3QkFBd0IsQ0FBRSxJQUFZLEVBQUUsT0FBWTtRQUN4RCxPQUFPLGtCQUFLLENBQUMsTUFBTSxDQUFDO1lBQ2hCLENBQUMsRUFBVSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDekQsQ0FBQyxFQUFVLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN6RCxTQUFTLEVBQUUsSUFBQSxrQ0FBMEIsRUFBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ3RELE1BQU0sRUFBSyxJQUFBLGlDQUF5QixFQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDckQsSUFBSTtTQUNQLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sU0FBUyxDQUFFLE9BQVk7UUFDMUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU1RSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBUyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU0sT0FBTyxDQUFFLE9BQVk7UUFDeEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBUyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0o7QUE5QkQsMENBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLi8uLi9jbGllbnQvY29yZS9kZXBzL2hhbW1lcmhlYWQnO1xuaW1wb3J0IHsgY2FsY3VsYXRlS2V5TW9kaWZpZXJzVmFsdWUsIGNhbGN1bGF0ZU1vdXNlQnV0dG9uVmFsdWUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBBeGlzVmFsdWVzIGZyb20gJy4uLy4uL2NsaWVudC9jb3JlL3V0aWxzL3ZhbHVlcy9heGlzLXZhbHVlcyc7XG5cbmNvbnN0IE1PVVNFX0VWRU5UX09QVElPTlMgPSB7XG4gICAgY2xpY2tDb3VudDogMSxcbiAgICBidXR0b246ICAgICAnbGVmdCcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm94eWxlc3NFdmVudFNpbXVsYXRvciB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kaXNwYXRjaEV2ZW50Rm46IEZ1bmN0aW9uO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2xlZnRUb3BQb2ludDogQXhpc1ZhbHVlczxudW1iZXI+O1xuICAgIGNvbnN0cnVjdG9yIChkaXNwYXRjaEV2ZW50Rm46IEZ1bmN0aW9uLCBsZWZ0VG9wUG9pbnQ/OiBBeGlzVmFsdWVzPG51bWJlcj4pIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudEZuID0gZGlzcGF0Y2hFdmVudEZuO1xuICAgICAgICB0aGlzLl9sZWZ0VG9wUG9pbnQgICAgPSBsZWZ0VG9wUG9pbnQgfHwgbmV3IEF4aXNWYWx1ZXM8bnVtYmVyPigwLCAwKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVNb3VzZUV2ZW50T3B0aW9ucyAodHlwZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpOiBhbnkge1xuICAgICAgICByZXR1cm4gdXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgICAgIHg6ICAgICAgICAgb3B0aW9ucy5vcHRpb25zLmNsaWVudFggKyB0aGlzLl9sZWZ0VG9wUG9pbnQueCxcbiAgICAgICAgICAgIHk6ICAgICAgICAgb3B0aW9ucy5vcHRpb25zLmNsaWVudFkgKyB0aGlzLl9sZWZ0VG9wUG9pbnQueSxcbiAgICAgICAgICAgIG1vZGlmaWVyczogY2FsY3VsYXRlS2V5TW9kaWZpZXJzVmFsdWUob3B0aW9ucy5vcHRpb25zKSxcbiAgICAgICAgICAgIGJ1dHRvbjogICAgY2FsY3VsYXRlTW91c2VCdXR0b25WYWx1ZShvcHRpb25zLm9wdGlvbnMpLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgfSwgTU9VU0VfRVZFTlRfT1BUSU9OUyk7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdXNlRG93biAob3B0aW9uczogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IHRoaXMuX2NyZWF0ZU1vdXNlRXZlbnRPcHRpb25zKCdtb3VzZVByZXNzZWQnLCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudEZuKEV2ZW50VHlwZS5Nb3VzZSwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VVcCAob3B0aW9uczogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IHRoaXMuX2NyZWF0ZU1vdXNlRXZlbnRPcHRpb25zKCdtb3VzZVJlbGVhc2VkJywgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoRXZlbnRGbihFdmVudFR5cGUuTW91c2UsIGV2ZW50T3B0aW9ucyk7XG4gICAgfVxufVxuIl19